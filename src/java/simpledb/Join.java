package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate p;
    private OpIterator child1;
    private OpIterator child2;
    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return child1.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return child2.getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    private Tuple left;
    private HashMap<Field, List<Tuple>> hashJoin;
    private Tuple inner;
    private Iterator<Tuple> matchedTuples;
    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        super.open();
        child1.open();
        child2.open();

        // if join on equality, using hash join
        if (p.getOperator().equals(Predicate.Op.EQUALS)) {
            hashJoin = new HashMap<>();
            // scan child1 and build hashJoin
            while (child1.hasNext()) {
                Tuple t1 = child1.next();
                int f1num = p.getField1();
                Field f1 = t1.getField(f1num);
                if (!hashJoin.containsKey(f1)) {
                    this.hashJoin.put(f1, new ArrayList<>());
                }
                hashJoin.get(f1).add(t1);
            }
        }
        // use nested-loop join on other join predicate operations
    }

    public void close() {
        // some code goes here
        if (p.getOperator().equals(Predicate.Op.EQUALS)) {
            hashJoin = null;
            inner = null;
            matchedTuples = null;
        }
        child1.close();
        child2.close();
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        close();
        open();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        if (p.getOperator().equals(Predicate.Op.EQUALS)) { // hash join
            if (inner == null) { // only on the first call
                inner = child2.next();
                List<Tuple> tupleList = hashJoin.getOrDefault(inner.getField(p.getField2()), new ArrayList<>());
                matchedTuples = tupleList.iterator();
            }
            while (matchedTuples.hasNext()) {
                Tuple outer = matchedTuples.next();
                if (this.p.filter(outer, inner)) {
                    return joinTuple(outer, inner);
                }
            }
            while (child2.hasNext()) {
                inner = child2.next();
                int f2num = p.getField2();
                Field f2 = inner.getField(f2num);
                List<Tuple> tupleList = hashJoin.getOrDefault(f2, new ArrayList<>());
                matchedTuples = tupleList.iterator();
                while (matchedTuples.hasNext()) {
                    Tuple outer = matchedTuples.next();
                    if (this.p.filter(outer, inner)) {
                        return joinTuple(outer, inner);
                    }
                }
            }
        } else {
            // nested-loop join
            if (left == null) {
                left = child1.next();
                child2.rewind();
            }
            while (child2.hasNext()) {
                Tuple right = child2.next();
                if (this.p.filter(left, right)) {
                    return joinTuple(left, right);
                }
            }

            while (child1.hasNext()) {
                left = child1.next();
                child2.rewind();
                while (child2.hasNext()) {
                    Tuple right = child2.next();
                    if (this.p.filter(left, right)) {
                        return joinTuple(left, right);
                    }
                }
            }
        }
        return null;
    }

    private Tuple joinTuple(Tuple t1, Tuple t2) throws TransactionAbortedException, DbException {
        Tuple joined = new Tuple(getTupleDesc());
        for (int i = 0; i < t1.getTupleDesc().numFields(); i++) {
            joined.setField(i, t1.getField(i));
        }
        for (int i = 0; i < t2.getTupleDesc().numFields(); i++) {
            joined.setField(i + t1.getTupleDesc().numFields(), t2.getField(i));
        }
        return joined;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return new OpIterator[]{child1, child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        child1 = children[0];
        child2 = children[1];
    }
}
